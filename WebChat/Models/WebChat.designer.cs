#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebChat.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebChatDB")]
	public partial class WebChatDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChatRoom(ChatRoom instance);
    partial void UpdateChatRoom(ChatRoom instance);
    partial void DeleteChatRoom(ChatRoom instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertLoggedInUser(LoggedInUser instance);
    partial void UpdateLoggedInUser(LoggedInUser instance);
    partial void DeleteLoggedInUser(LoggedInUser instance);
    #endregion
		
		public WebChatDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebChatDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WebChatDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebChatDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebChatDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebChatDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChatRoom> ChatRooms
		{
			get
			{
				return this.GetTable<ChatRoom>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<LoggedInUser> LoggedInUsers
		{
			get
			{
				return this.GetTable<LoggedInUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatRoom")]
	public partial class ChatRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChatRoomID;
		
		private string _ChatRoomName;
		
		private string _ChatRoomDescription;
		
		private string _ChatRoomCreator;
		
		private System.DateTime _ChatRoomCreateDate;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<LoggedInUser> _LoggedInUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChatRoomIDChanging(int value);
    partial void OnChatRoomIDChanged();
    partial void OnChatRoomNameChanging(string value);
    partial void OnChatRoomNameChanged();
    partial void OnChatRoomDescriptionChanging(string value);
    partial void OnChatRoomDescriptionChanged();
    partial void OnChatRoomCreatorChanging(string value);
    partial void OnChatRoomCreatorChanged();
    partial void OnChatRoomCreateDateChanging(System.DateTime value);
    partial void OnChatRoomCreateDateChanged();
    #endregion
		
		public ChatRoom()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._LoggedInUsers = new EntitySet<LoggedInUser>(new Action<LoggedInUser>(this.attach_LoggedInUsers), new Action<LoggedInUser>(this.detach_LoggedInUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ChatRoomName
		{
			get
			{
				return this._ChatRoomName;
			}
			set
			{
				if ((this._ChatRoomName != value))
				{
					this.OnChatRoomNameChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomName = value;
					this.SendPropertyChanged("ChatRoomName");
					this.OnChatRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomDescription", DbType="VarChar(256)")]
		public string ChatRoomDescription
		{
			get
			{
				return this._ChatRoomDescription;
			}
			set
			{
				if ((this._ChatRoomDescription != value))
				{
					this.OnChatRoomDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomDescription = value;
					this.SendPropertyChanged("ChatRoomDescription");
					this.OnChatRoomDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomCreator", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ChatRoomCreator
		{
			get
			{
				return this._ChatRoomCreator;
			}
			set
			{
				if ((this._ChatRoomCreator != value))
				{
					this.OnChatRoomCreatorChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomCreator = value;
					this.SendPropertyChanged("ChatRoomCreator");
					this.OnChatRoomCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomCreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChatRoomCreateDate
		{
			get
			{
				return this._ChatRoomCreateDate;
			}
			set
			{
				if ((this._ChatRoomCreateDate != value))
				{
					this.OnChatRoomCreateDateChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomCreateDate = value;
					this.SendPropertyChanged("ChatRoomCreateDate");
					this.OnChatRoomCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_Message", Storage="_Messages", ThisKey="ChatRoomID", OtherKey="ChatRoomID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_LoggedInUser", Storage="_LoggedInUsers", ThisKey="ChatRoomID", OtherKey="ChatRoomID")]
		public EntitySet<LoggedInUser> LoggedInUsers
		{
			get
			{
				return this._LoggedInUsers;
			}
			set
			{
				this._LoggedInUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
		
		private void attach_LoggedInUsers(LoggedInUser entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_LoggedInUsers(LoggedInUser entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private int _ChatRoomID;
		
		private string _MessageText;
		
		private string _MessageOwner;
		
		private System.DateTime _MessageTimeStamp;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnChatRoomIDChanging(int value);
    partial void OnChatRoomIDChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    partial void OnMessageOwnerChanging(string value);
    partial void OnMessageOwnerChanged();
    partial void OnMessageTimeStampChanging(System.DateTime value);
    partial void OnMessageTimeStampChanged();
    #endregion
		
		public Message()
		{
			this._ChatRoom = default(EntityRef<ChatRoom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int NOT NULL")]
		public int ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageText", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string MessageText
		{
			get
			{
				return this._MessageText;
			}
			set
			{
				if ((this._MessageText != value))
				{
					this.OnMessageTextChanging(value);
					this.SendPropertyChanging();
					this._MessageText = value;
					this.SendPropertyChanged("MessageText");
					this.OnMessageTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageOwner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MessageOwner
		{
			get
			{
				return this._MessageOwner;
			}
			set
			{
				if ((this._MessageOwner != value))
				{
					this.OnMessageOwnerChanging(value);
					this.SendPropertyChanging();
					this._MessageOwner = value;
					this.SendPropertyChanged("MessageOwner");
					this.OnMessageOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageTimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime MessageTimeStamp
		{
			get
			{
				return this._MessageTimeStamp;
			}
			set
			{
				if ((this._MessageTimeStamp != value))
				{
					this.OnMessageTimeStampChanging(value);
					this.SendPropertyChanging();
					this._MessageTimeStamp = value;
					this.SendPropertyChanged("MessageTimeStamp");
					this.OnMessageTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_Message", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ChatRoomID", IsForeignKey=true)]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ChatRoomID = value.ChatRoomID;
					}
					else
					{
						this._ChatRoomID = default(int);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoggedInUsers")]
	public partial class LoggedInUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChatRoomID;
		
		private string _UserName;
		
		private System.DateTime _LoginTimeStamp;
		
		private System.DateTime _LastMessageTimeStamp;
		
		private int _LoginId;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChatRoomIDChanging(int value);
    partial void OnChatRoomIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoginTimeStampChanging(System.DateTime value);
    partial void OnLoginTimeStampChanged();
    partial void OnLastMessageTimeStampChanging(System.DateTime value);
    partial void OnLastMessageTimeStampChanged();
    partial void OnLoginIdChanging(int value);
    partial void OnLoginIdChanged();
    #endregion
		
		public LoggedInUser()
		{
			this._ChatRoom = default(EntityRef<ChatRoom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomID", DbType="Int NOT NULL")]
		public int ChatRoomID
		{
			get
			{
				return this._ChatRoomID;
			}
			set
			{
				if ((this._ChatRoomID != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomID = value;
					this.SendPropertyChanged("ChatRoomID");
					this.OnChatRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime LoginTimeStamp
		{
			get
			{
				return this._LoginTimeStamp;
			}
			set
			{
				if ((this._LoginTimeStamp != value))
				{
					this.OnLoginTimeStampChanging(value);
					this.SendPropertyChanging();
					this._LoginTimeStamp = value;
					this.SendPropertyChanged("LoginTimeStamp");
					this.OnLoginTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastMessageTimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime LastMessageTimeStamp
		{
			get
			{
				return this._LastMessageTimeStamp;
			}
			set
			{
				if ((this._LastMessageTimeStamp != value))
				{
					this.OnLastMessageTimeStampChanging(value);
					this.SendPropertyChanging();
					this._LastMessageTimeStamp = value;
					this.SendPropertyChanged("LastMessageTimeStamp");
					this.OnLastMessageTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoginId
		{
			get
			{
				return this._LoginId;
			}
			set
			{
				if ((this._LoginId != value))
				{
					this.OnLoginIdChanging(value);
					this.SendPropertyChanging();
					this._LoginId = value;
					this.SendPropertyChanged("LoginId");
					this.OnLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_LoggedInUser", Storage="_ChatRoom", ThisKey="ChatRoomID", OtherKey="ChatRoomID", IsForeignKey=true)]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.LoggedInUsers.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.LoggedInUsers.Add(this);
						this._ChatRoomID = value.ChatRoomID;
					}
					else
					{
						this._ChatRoomID = default(int);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
